<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyTabControl</name>
    </assembly>
    <members>
        <member name="F:MyTabControl.MyTabControlEx.key">
            <summary>
            以下三行数据为呼吸灯相关过程数据
            </summary>
        </member>
        <member name="F:MyTabControl.MyTabControlEx._tabbaseColor">
            <summary>
            呼吸灯传递过程颜色
            </summary>
        </member>
        <member name="F:MyTabControl.MyTabControlEx._baseColor">
            <summary>
            基础颜色
            </summary>
        </member>
        <member name="F:MyTabControl.MyTabControlEx._backColor">
            <summary>
            背景色
            </summary>
        </member>
        <member name="F:MyTabControl.MyTabControlEx.Radius">
            <summary>
            tab标签圆角直径
            </summary>
        </member>
        <member name="F:MyTabControl.MyTabControlEx.tabFlickerDictionary">
            <summary>
            具有呼吸灯效果标签的数组容器
            </summary>
        </member>
        <member name="F:MyTabControl.MyTabControlEx.TipTextDictionary">
            <summary>
            记录标签Tip文字的容器
            </summary>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            对SelectedIndexChanged重写，在标签改变时记录上次选中的标签；移除当前标签特效
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            重写鼠标事件，鼠标在关闭区域点击时关闭选项卡
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重写绘制事件，执行自定义的标签绘制。关键事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.tabFlickerAdd(System.String)">
            <summary>
            将tabpage加入呼吸灯显示容器，使标签具有呼吸灯效果
            </summary>
            <param name="tabPageName"></param>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.tabFlickerRemove(System.String)">
            <summary>
            将tabpage移除呼吸灯显示容器
            </summary>
            <param name="tabPageName"></param>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.TipTextAdd(System.String,System.String)">
            <summary>
            将需要显示的Tip文字添加到容器以显示
            </summary>
            <param name="tabPageName"></param>
            <param name="text"></param>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.TipTextRemove(System.String)">
            <summary>
            Tip文字不需要显示后从容器移除
            </summary>
            <param name="tabPageName"></param>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.SetStyles">
            <summary>
            对控件基础功能设置。自行绘制，双重缓存忽略WM_ERASEBKGND消息，调整大小重绘，接受ALPHA透明设置
            </summary>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.DrawTabContrl(System.Drawing.Graphics)">
            <summary>
            整个控件重绘方法
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.DrawDrawBackgroundAndHeader(System.Drawing.Graphics)">
            <summary>
            绘制整体背景
            </summary>
            <param name="g">tabcontrol的绘图面</param>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.DrawTabPages(System.Drawing.Graphics)">
            <summary>
            绘制tab标签
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.tabFlicker_timer_Tick(System.Object,System.EventArgs)">
            <summary>
            按时间重设呼吸灯效果颜色
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.getCloseButtonRect(System.Drawing.Rectangle)">
            <summary>
            根据标签页矩形区，计算关闭按钮的矩形区
            </summary>
            <param name="tabRect">标签页矩形区</param>
            <returns>按钮矩形区</returns>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.DrawCloseButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
            绘制关闭按钮
            </summary>
            <param name="g"></param>
            <param name="tabRect">标签的框体</param>
            <param name="cusorPoint">鼠标在工作区的相对坐标值</param>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.DrawTipText(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
            <summary>
            绘制标签Tip文字
            </summary>
            <param name="g">绘图面</param>
            <param name="tabRect">标签矩形框体</param>
            <param name="text">需要绘制的文字</param>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.getTipRect(System.Drawing.Rectangle,System.Int32)">
            <summary>
            获取Tip绘制矩形框
            </summary>
            <param name="tabRect">标签框体</param>
            <param name="textLength">字体长度</param>
            <returns></returns>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.CreateTipPath(System.Drawing.Rectangle)">
            <summary>
            根据tiprect框体绘制有圆角的框体路径
            </summary>
            <param name="rect">tiprect</param>
            <returns></returns>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.DrawtabText(System.Drawing.Graphics,System.Windows.Forms.TabPage,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            绘制标签的文字
            </summary>
            <param name="g">tabcontrol的graphics</param>
            <param name="page">标签页tabpage</param>
            <param name="tabRect">标签的框体</param>
            <param name="hasImage">是否绘制了图片</param>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.DrawBorder(System.Drawing.Graphics)">
            <summary>
            绘制框线
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.RenderTabBackgroundInternal(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Single,System.Drawing.Drawing2D.LinearGradientMode)">
            <summary>
            绘制标签背景
            </summary>
            <param name="g"></param>
            <param name="rect"></param>
            <param name="baseColor"></param>
            <param name="borderColor"></param>
            <param name="basePosition"></param>
            <param name="mode"></param>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.DrawTabImage(System.Drawing.Graphics,System.Windows.Forms.TabPage,System.Drawing.Rectangle)">
            <summary>
            绘制标签图标
            </summary>
            <param name="g"></param>
            <param name="page"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.CreateTabPath(System.Drawing.Rectangle)">
            <summary>
            绘制tab标签的框体
            </summary>
            <param name="rect">tab框体矩形的位置和大小</param>
            <returns>返回一个绘制的框体</returns>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.GetColor(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            自定义颜色位偏移调整函数
            </summary>
            <param name="colorBase"></param>
            <param name="a"></param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.SelectIndexLog">
            <summary>
            记录选项卡上次选中的标签Index编号。
            </summary>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.upDownRect(System.IntPtr)">
            <summary>
            得到左右箭头绘制区域，以从标签绘制区域移除。防止标签绘图区与箭头绘图区重叠
            </summary>
            <param name="upDownHandle">左右箭头句柄</param>
            <returns></returns>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.BeginPaint(System.IntPtr,MyTabControl.MyTabControlEx.PAINTSTRUCT@)">
            <summary>
            BeginPaint函数为指定窗口进行绘图工作的准备，并用将和绘图有关的信息填充到一个PAINTSTRUCT结构中。
            </summary>
            <param name="hWnd">[输入]被重绘的窗口句柄</param>
            <param name="ps">:[输出]指向一个用来接收绘画信息的PAINTSTRUCT结构</param>
            <returns>如果函数成功，返回值是指定窗口的“显示设备描述表”句柄。如果函数失败，返回值是NULL，表明没有得到显示设备的内容。</returns>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.EndPaint(System.IntPtr,MyTabControl.MyTabControlEx.PAINTSTRUCT@)">
            <summary>
            EndPaint函数标记指定窗口的绘画过程结束；这个函数在每次调用BeginPaint函数之后被请求，但仅仅在绘画完成以后。
            </summary>
            <param name="hWnd">[输入]已经被重画的窗口的HANDLE</param>
            <param name="ps">[输入]指向一个PAINTSTRUCT结构，该结构包含了绘画信息，是BeginPaint函数返回的返回值</param>
            <returns>返回值始终是非0</returns>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.GetKeyState(System.Int32)">
            <summary>
            该函数检取指定虚拟键的状态。该状态指定此键是UP状态，DOWN状态，还是被触发的（开关每次按下此键时进行切换）。
            </summary>
            <param name="nVirtKey">检查的虚拟键码</param>
            <returns>> 大于0 没按下，小于0被按下</returns>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.SendMessage(System.IntPtr,System.Int32,System.Int32,MyTabControl.MyTabControlEx.RECT@)">
            <summary>
            
            </summary>
            <param name="hWnd"></param>
            <param name="Msg"></param>
            <param name="wParam"></param>
            <param name="lParam">传递rect类型矩形坐标</param>
            <returns></returns>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.GetCursorPos(System.Drawing.Point@)">
            <summary>
            该函数检取光标的位置，以屏幕坐标表示
            </summary>
            <param name="lpPoint"></param>
            <returns></returns>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.OffsetRect(MyTabControl.MyTabControlEx.RECT@,System.Int32,System.Int32)">
            <summary>
            函数将指定的矩形移动到指定的位置,如果函数成功，返回非0，否则返回0.
            </summary>
            <param name="lpRect">[输入输出]指向一个RECT结构，其中包含了被移动矩形的逻辑坐标</param>
            <param name="x">[输入]指定的矩形左右移动的量。当向左移动的时候，这个参数必须是一个负值</param>
            <param name="y">[输入]指定的矩形上下移动的量。当想上移动的时候，这个参数应该是一个负值</param>
            <returns></returns>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.PtInRect(MyTabControl.MyTabControlEx.RECT@,System.Drawing.Point)">
            <summary>
            判断一个点是否在Rect中
            </summary>
            <param name="lprc">一个指向RECT类型的常量指针，也就是说这个值是你要进行点是否在RECT对象的RECT类型的变量</param>
            <param name="pt">一个类型为POINT类型的变量，也就是你要进行判断点是否在RECT对象的点</param>
            <returns>如果点a在rect对象中，那么返回值为非零，否则返回值为0</returns>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.GetWindowRect(System.IntPtr,MyTabControl.MyTabControlEx.RECT@)">
            <summary>
            该函数返回指定窗口的边框矩形的尺寸。该尺寸以相对于屏幕坐标左上角的屏幕坐标给出。
            </summary>
            <param name="hWnd">窗口句柄</param>
            <param name="lpRect">指向一个RECT结构的指针，该结构接收窗口的左上角和右下角的屏幕坐标。</param>
            <returns>如果函数成功，返回值为非零：如果函数失败，返回值为零。若想获得更多错误信息，请调用GetLastError函数</returns>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.GetClientRect(System.IntPtr,MyTabControl.MyTabControlEx.RECT@)">
            <summary>
            该函数获取窗口客户区的坐标。客户区坐标指定客户区的左上角和右下角。由于客户区坐标是相对窗口客户区的左上角而言的，因此左上角坐标为（0，0）。
            </summary>
            <param name="hWnd">是程序窗口的句柄。</param>
            <param name="r">指向一个RECT类型的rectangle结构</param>
            <returns>如果函数成功，返回一个非零值。</returns>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.IsWindowVisible(System.IntPtr)">
            <summary>
            通过该函数可以获得指定窗口的可视状态，即显示或者隐藏。
            </summary>
            <param name="hwnd"></param>
            <returns></returns>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.checkUpDownButton">
            <summary>
            检查是否存在左右按钮，有则以句柄创建一个upDownButtonNativeWindow。如果没有则将分配的的内存释放。
            </summary>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.OnPaintUpDownButton(MyTabControl.UpDownButtonPaintEventArgs)">
            <summary>
            对左右键进行重绘
            </summary>
            <param name="e">左右键的参数，继承painteventargs</param>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.RenderButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Windows.Forms.ArrowDirection)">
            <summary>
            左右箭头框体绘制
            </summary>
            <param name="g"></param>
            <param name="rect"></param>
            <param name="baseColor"></param>
            <param name="borderColor"></param>
            <param name="arrowColor"></param>
            <param name="direction"></param>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.RenderArrowInternal(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ArrowDirection,System.Drawing.Brush)">
            <summary>
            左右箭头绘制
            </summary>
            <param name="g"></param>
            <param name="dropDownRect"></param>
            <param name="direction"></param>
            <param name="brush"></param>
        </member>
        <member name="M:MyTabControl.MyTabControlEx.RenderBackgroundInternal(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean,System.Drawing.Drawing2D.LinearGradientMode)">
            <summary>
            绘制左右箭头背景
            </summary>
            <param name="g"></param>
            <param name="rect"></param>
            <param name="baseColor"></param>
            <param name="borderColor"></param>
            <param name="basePosition"></param>
            <param name="drawBorder"></param>
            <param name="mode"></param>
        </member>
        <member name="E:MyTabControl.MyTabControlEx.tabClose">
            <summary>
            选中标签页在关闭前触发事件（tabcontrol的select标签页关闭前触发），与controlremoved事件相似
            </summary>
        </member>
        <member name="P:MyTabControl.MyTabControlEx.BaseColor">
            <summary>
            控件基础颜色
            </summary>
        </member>
        <member name="P:MyTabControl.MyTabControlEx.BackColor">
            <summary>
            背景色
            </summary>
        </member>
        <member name="P:MyTabControl.MyTabControlEx.BorderColor">
            <summary>
            边框线条颜色
            </summary>
        </member>
        <member name="P:MyTabControl.MyTabControlEx.标签呼吸灯颜色">
            <summary>
            Tab标签呼吸灯效果的颜色。
            </summary>
        </member>
        <member name="P:MyTabControl.MyTabControlEx.TipBackColor">
            <summary>
            标签tip背景颜色
            </summary>
        </member>
        <member name="P:MyTabControl.MyTabControlEx.TipTextColor">
            <summary>
            标签tip字体颜色
            </summary>
        </member>
        <member name="P:MyTabControl.MyTabControlEx.HaveCloseButton">
            <summary>
            是否绘制关闭按钮
            </summary>
        </member>
        <member name="P:MyTabControl.MyTabControlEx.ShowDrawTipText">
            <summary>
            是否在标签绘制提示
            </summary>
        </member>
        <member name="P:MyTabControl.MyTabControlEx.ArrowColor">
            <summary>
            左右箭头颜色
            </summary>
        </member>
        <member name="P:MyTabControl.MyTabControlEx.DrawUpDownButtonByCustom">
            <summary>
            左右箭头是否自定义绘制
            </summary>
        </member>
        <member name="E:MyTabControl.MyTabControlEx.PaintUpDownButton">
             <summary>
            第一个参数是一个键值，这样添加以后，可以通过下面的代码获取该事件base.Events[EventPaintUpDownButton] as EventHandler;
             </summary>
        </member>
        <member name="P:MyTabControl.MyTabControlEx.UpDownButtonHandle">
            <summary>
            得到左右箭头的句柄
            </summary>
        </member>
        <member name="T:MyTabControl.MyTabControlEx.tabCloseEventHandle">
            <summary>
            事件委托
            </summary>
            <param name="sender">传递本tabControl的指针</param>
            <param name="e"></param>
        </member>
        <member name="T:MyTabControl.MyTabControlEx.PAINTSTRUCT">
            <summary>
            该结构体包含了某应用程序用来绘制它所拥有的窗口客户区所需要的信息。
            </summary>
        </member>
        <member name="T:MyTabControl.MyTabControlEx.RECT">
            <summary>
            矩形坐标块
            </summary>
        </member>
        <member name="T:MyTabControl.UpDownButtonPaintEventHandler">
            <summary>
            自定义左右箭头绘制的事件委托
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MyTabControl.UpDownButtonPaintEventArgs">
            <summary>
            继承PaintEventArgs的参数类，增加鼠标状态传递，over，press，updown等状态
            </summary>
        </member>
    </members>
</doc>
